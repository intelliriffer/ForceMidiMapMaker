import os
import sys
import re
# ------------------------------------------------------------------------------
# Script: convert.py
# Description: This script converts a basic text file with Custom CC mappings
#              to an Akai Force Midi CC Map template (XPM file). The XPM file
#              can then be loaded into a MIDI track on the Akai Force to
#              control external hardware/software.
#
# Requirements: Python 3.x
#
# Usage:
#   python convert.py "[midiMappingFile].txt"
#
#   - [midiMappingFile].txt: The path to the text template file containing
#     the CC mappings.
#
#   - A file named [midiMappingFile].xpm will be created in the same
#     directory as the text template.
#
# Template File Format:
#   - The first line must be: ##FORCEMIDIMAP
#   - Lines starting with # are ignored (comment lines).
#   - Any text after # in a line not starting with # is ignored (inline comment).
#   - Each mapping line should start with a CC number followed by an equals
#     sign (=) and the parameter title.
#     Example: 11 = Expression
#   - Any missing CCs in the file will automatically be set to "no show" (--).
#   - CCs will be mapped in the order they appear in the file (16 per page,
#     starting from the bottom left to the top right).
#   - For custom ordering or blank spaces, you can put in unused CCs like:
#     125 = --
#   - Avoid using CCs above 120, as those are global (omni mode) messages.
#   - CC 0 is not used, so that line will be excluded.
#   - Avoid using generic CCs for custom parameters (e.g., CC 1 Modulation,
#     CC 64 Sustain, CC 10 Pan), as the Force may reset Volume, Sustain, and
#     Pan on clip changes.
# Note: This Python Script was generated by Gemini code assint by converting my javascript (nodeJS)
#       code in convert.js. Few AI Bugs Were Fixed through!.
# Author: Amit Talwar
# ------------------------------------------------------------------------------


HEADER = "##FORCEMIDIMAP"
NOASSIGN = 2147483647
LAYOUT_NODE = """    <Parameter Position="#ADDRESS">
        <Index>#CC</Index>
        <Value>0.000000</Value>
      </Parameter>"""
CCPARAM = '<Parameter Index="#CC" Name="#NAME"/>'


def convert(mapping):
    """Converts the mapping data to an XPM file."""
    try:
        with open("./src/xpm.template", "r") as f:
            template_content = f.read()
    except FileNotFoundError:
        print(f"Error: xpm.template not found in ./src directory")
        sys.exit(1)
    
    template_content = template_content.replace("#NAME#", mapping["name"])
    layout = []
    cc_map = []
    for i in range(1, 128):
        pos = (i - 1) % 16
        page = (i - 1) // 16
        addr = f"{page} 0 {pos}"
        l = LAYOUT_NODE.replace("#ADDRESS", addr)
        lcc = NOASSIGN
        if mapping["layout"][i] != NOASSIGN:
            lcc = mapping["CC"][mapping["layout"][i]]
            lcc = NOASSIGN if lcc == "--" else mapping["layout"][i]
        l = l.replace("#CC", str(lcc))
        layout.append(l)
        cc = CCPARAM.replace("#CC", str(i))
        cc = cc.replace("#NAME", mapping["CC"][i])
        cc_map.append(cc)

    output_file = os.path.abspath(mapping["fileName"])
    template_content = template_content.replace("#LAYOUT#", "\n".join(layout))
    template_content = template_content.replace("#CCMAP#", "\n".join(cc_map))

    with open(output_file, "w") as f:
        f.write(template_content)
    print(f"Written Xpm Template: {output_file}")


def read_template():
    """Reads the template file and extracts the mapping data."""
    try:
        if len(sys.argv) < 2:
             
            raise Exception("Please Provide a Template FileName as Parameter")

        file_name = sys.argv[1]
        if not os.path.exists(file_name):
            raise Exception(f"File {file_name} does not exist")

        with open(file_name, "r") as f:
            data = [line.strip() for line in f if line.strip()]

        if data[0] != HEADER:
            raise Exception(
                f"Template Format Error! File {file_name} does not start with {HEADER}"
            )

        data = [
            line.strip()
            for line in data
            if not line.strip().startswith("#")
        ]
        data = [re.sub(r"#.*$", "", line).strip() for line in data]
        data = [line for line in data if re.match(r"^[1-9][0-9]{0,2} *=.*$", line)]

        mapping = {}
        if len(data) < 1:
            raise Exception("No Valid Mapping Lines found in Template")

        ofn = os.path.splitext(os.path.basename(file_name))[0]
        ofile = os.path.join(os.path.dirname(file_name), ofn + ".xpm")
        mapping["CC"] = ["--"] * 128
        mapping["layout"] = [NOASSIGN] * 128
        mapping["name"] = ofn
        mapping["fileName"] = ofile

        for i, d in enumerate(data):
            line = d.split("=")
            cc = int(line[0])
            name = line[1].strip()
            name = "--" if name == "" else name
            mapping["CC"][cc] = name
            mapping["layout"][i + 1] = cc

        return mapping

    except Exception as e:
        print("Error *************************************\n", e)
        sys.exit(1)


if __name__ == "__main__":
    mapping = read_template()
    convert(mapping)
