/**
 * Converts xpm midimap to text template
 * You likely Do not need to use this file, uless you already have some of yor own xmp Templates
 * and want to make text templates from Them.
 * 
**/

const fs = require('fs');
const path = require('path');
const header = "##FORCEMIDIMAP"


createTemplate(readXPM());

function createTemplate(xpm) {
    let output = [];
    output.push(header);
    output.push(`#Autogenerated template from Existing XPM`);
    output.push(`# CC 124 is being used as Empty Place Holder!\n`);
    xpm.layout.forEach((l, i) => {
        l.VALUE = l.VALUE > 127 ? 127 : l.VALUE
        let def = l.VALUE != 0 ? `@${Math.floor(l.VALUE)} ` : '';
        let line = `${l.CC} = ${def}${l.NAME}`;
        if (i % 16 == 0) output.push(`\n#--- PAGE ${Math.floor(i / 16) + 1}----------------------------\n`);
        output.push(line);
    });

    fs.writeFileSync(xpm.fileName, output.join("\n"));
    console.log("   Generated:", xpm.fileName);
}


function readXPM() {
    try {
        if (process.argv.length < 3) {
            throw ("Please Provide a XPM FileName as Parameter");
        }

        const fileName = process.argv[2];
        if (!fs.existsSync(fileName)) {
            throw ("File " + fileName + " does not exist");
        }
        let data = fs.readFileSync(fileName, 'utf8').toString().trim();

        if (data.indexOf("MPCVObject") < 0) {
            throw ("xpm Format Error!");
        }

        if (data.indexOf(`<Program type="MIDI">`) < 0) {
            throw ("xpm not of a Midi Track");
        }
        console.log("Processing:", fileName), " ---------------";
        let layout = getLayout(data);

        const ofn = path.basename(fileName).split(".").slice(0, -1).join(".");
        const ofile = path.join(path.dirname(fileName), ofn + ".txt");

        return {
            layout: layout,
            fileName: ofile,
            name: ofn
        }

    } catch (e) {
        console.error("Error *************************************\n", e);
        process.exit(1);
    }

}

function getLayout(data) {
    layout = [];


    let rx = new RegExp(`<Parameter +Position="[0-9]+ [0-9]+ [0-9]+" *>.*?<\/Parameter>`, 'sg');
    let M = data.match(rx);

    if (!M || M.length < 1) throw (`Unable to Find Mappings in XPM File!}`);

    M.forEach(n => {
        rx = new RegExp(`<Parameter +Position="[0-9]+ [0-9]+ [0-9]+" *>.*<Index>([0-9]+)</Index>.*<Value>([0-9.]+)</Value>.*</Parameter>`, 's');
        let items = n.match(rx);
        let mxp = new RegExp(`<Parameter +Index="${items[1]}" +Name="([^"]+)" */> `, 's');
        let meta = data.match(mxp);
        // console.log(meta);
        layout.push({
            CC: items[1] > 127 ? 124 : items[1],
            VALUE: items[2] * 128,
            NAME: meta ? meta[1].trim() : '--'
        });

    });
    return layout;


}